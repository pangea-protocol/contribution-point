{
  "address": "0x556fC7F326370BcEE8683fD89c5BEA301fB8Ea58",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "contributionPointOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "contributionRecordByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tagId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "time",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "point",
              "type": "uint32"
            }
          ],
          "internalType": "struct IContributionStruct.ContributionRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "contributionRecordCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nums",
          "type": "uint256"
        }
      ],
      "name": "contributionRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tagId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "time",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "point",
              "type": "uint32"
            }
          ],
          "internalType": "struct IContributionStruct.ContributionRecord[]",
          "name": "records",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "contributorIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tagId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "point",
          "type": "uint32"
        }
      ],
      "name": "createRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        }
      ],
      "name": "createTag",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tagId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "deleteRecord",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tagId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "time",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "point",
              "type": "uint32"
            }
          ],
          "internalType": "struct IContributionStruct.ContributionRecord",
          "name": "record",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tagId",
          "type": "uint32"
        }
      ],
      "name": "tagDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contributorId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTags",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "point",
          "type": "uint32"
        }
      ],
      "name": "updateRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "tagId",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        }
      ],
      "name": "updateTagDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "usePoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bacd39a0c2499e128ef1ac7fa2a20f483f5d70d1c73cee218203a183a94bad3",
  "receipt": {
    "to": null,
    "from": "0x23004B8aD485cEf5C15f8D2868049aB4b2788B0b",
    "contractAddress": "0x556fC7F326370BcEE8683fD89c5BEA301fB8Ea58",
    "transactionIndex": 0,
    "gasUsed": "5632296",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3b7d7caabc384e85be399041d243600cc43f98e5e1598427d216bd33078285d9",
    "transactionHash": "0x6bacd39a0c2499e128ef1ac7fa2a20f483f5d70d1c73cee218203a183a94bad3",
    "logs": [],
    "blockNumber": 96836688,
    "cumulativeGasUsed": "5632296",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "02d9f995c11ec0cd39e2eba4e6723a04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributionPointOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"contributionRecordByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"point\",\"type\":\"uint32\"}],\"internalType\":\"struct IContributionStruct.ContributionRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributionRecordCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nums\",\"type\":\"uint256\"}],\"name\":\"contributionRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"point\",\"type\":\"uint32\"}],\"internalType\":\"struct IContributionStruct.ContributionRecord[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"contributorIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"point\",\"type\":\"uint32\"}],\"name\":\"createRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"createTag\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"deleteRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"point\",\"type\":\"uint32\"}],\"internalType\":\"struct IContributionStruct.ContributionRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"}],\"name\":\"tagDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contributorId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"point\",\"type\":\"uint32\"}],\"name\":\"updateRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tagId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"updateTagDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"usePoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createRecord(address,uint32,uint32)\":{\"notice\":\"create contribution record\"},\"deleteRecord(address,uint256)\":{\"notice\":\"delete contribution record\"},\"tagDescription(uint32)\":{\"notice\":\"return contribution tag description\"},\"updateRecord(address,uint256,uint32)\":{\"notice\":\"modify contribution record\"}},\"notice\":\"Contribution Point membership NFT\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContributionPoint.sol\":\"ContributionPoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = _functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb8709268fac307114f6cbb5e3cee798d91cd0adfea4d337c4920f8f0b2414f15\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/ContributionPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/UsePointCallee.sol\\\";\\nimport \\\"./interfaces/IContributionPoint.sol\\\";\\nimport \\\"./interfaces/IContributionPointModerator.sol\\\";\\n\\n/// @notice Contribution Point membership NFT\\ncontract ContributionPoint is\\n    IContributionPoint,\\n    IContributionPointModerator,\\n    ERC721Upgradeable,\\n    AccessControlUpgradeable,\\n    MulticallUpgradeable {\\n    using Strings for uint256;\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER\\\");\\n    mapping(address => ContributionRecord[]) private _contributionRecords;\\n    mapping(address => int256) private _pointOf;\\n\\n    string[] private _tagDescriptions;\\n\\n    mapping(address => uint256) private _contributorIdOf;\\n    uint256 private _contributorCounter;\\n\\n    //////////////////////////////////////////////\\n    // functions Related to Initialization\\n    //////////////////////////////////////////////\\n    function initialize(string memory name_, string memory symbol_) external initializer {\\n            __ERC721_init(name_, symbol_);\\n            __AccessControl_init();\\n            __Multicall_init();\\n\\n            _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n            registerContributor(_msgSender());\\n    }\\n\\n    modifier managerOnly() {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"ONLY MANAGER\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view\\n    override(ERC721Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return (\\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId)\\n        );\\n    }\\n\\n    //////////////////////////////////////////////\\n    // View Functions\\n    /////////////////////////////////////////////\\n    function tokenURI(uint256 contributorId) public view override returns (string memory) {\\n        address contributor = ownerOf(contributorId);\\n        int256 point = _pointOf[contributor];\\n        string memory pointMessage = point > 0 ? uint256(point).toString() : string(abi.encodePacked(\\\"-\\\", uint256(-point).toString()));\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{',\\n                        '\\\"name\\\": \\\"CONTRIBUTOR #', contributorId.toString(), '\\\", ',\\n                        '\\\"description\\\": \\\"PANGEA Contribution Point, this NFT represents contribution point for PANGEA contributors\\\",',\\n                        '\\\"attributes\\\": [',\\n                            '{\\\"trait_type\\\":\\\"numOfContributions\\\",\\\"value\\\":',uint256(_contributionRecords[contributor].length).toString(),\\\"},\\\",\\n                            '{\\\"trait_type\\\":\\\"totalPoints\\\",\\\"value\\\":',pointMessage,\\\"}]\\\",\\n                        '}'\\n                    )\\n                )\\n            )\\n        );\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _contributorCounter;\\n    }\\n\\n    function contributorIdOf(address contributor) external view returns (uint256) {\\n        require(balanceOf(contributor) > 0, \\\"NO MEMBERSHIP\\\");\\n        return _contributorIdOf[contributor];\\n    }\\n\\n    function totalTags() external view returns (uint256) {\\n        return _tagDescriptions.length;\\n    }\\n\\n    /// @notice return contribution tag description\\n    function tagDescription(uint32 tagId) external view returns (string memory) {\\n        return _tagDescriptions[tagId];\\n    }\\n\\n    // @notice returns the length of contribution record\\n    function contributionRecordCounts(address contributor) external view returns (uint256) {\\n        return _contributionRecords[contributor].length;\\n    }\\n\\n    // @notice read record by index\\n    function contributionRecordByIndex(address contributor, uint256 orderId) external view returns (ContributionRecord memory) {\\n        return _contributionRecords[contributor][orderId];\\n    }\\n\\n    // @notice read records by range\\n    function contributionRecords(address contributor, uint256 start, uint256 nums) external view returns (ContributionRecord[] memory records) {\\n        ContributionRecord[] memory _contributorRecords = _contributionRecords[contributor];\\n        uint256 end = Math.min(start + nums - 1, _contributorRecords.length - 1);\\n        require(start <= end, \\\"NO RECORDS\\\");\\n\\n        records = new ContributionRecord[](end - start + 1);\\n        for (uint256 i = start; i <= end; i++) {\\n            records[i - start] = _contributorRecords[i];\\n        }\\n    }\\n\\n    // @notice read total contribution point which contributor take\\n    function contributionPointOf(address contributor) external view returns (int256) {\\n        return _pointOf[contributor];\\n    }\\n\\n    //////////////////////////////////////////////\\n    // contributor's function\\n    //////////////////////////////////////////////\\n    function usePoint(uint32 amount, address to, bytes calldata data) external {\\n        int256 balance = _pointOf[_msgSender()];\\n        require(balance > 0 && uint256(amount) <= uint256(balance), \\\"INSUFFICIENT\\\");\\n        _pointOf[_msgSender()] -= castToInt256(amount);\\n\\n        UsePointCallee(to).usePointCallback(amount, data);\\n    }\\n\\n    //////////////////////////////////////////////\\n    // manipulation functions\\n    //\\n    // only manager can call\\n    /////////////////////////////////////////////\\n    function createTag(string memory desc) external managerOnly returns (uint32 tagId) {\\n        require(_tagDescriptions.length < type(uint32).max);\\n\\n        _tagDescriptions.push(desc);\\n        return uint32(_tagDescriptions.length - 1);\\n    }\\n\\n    function updateTagDescription(uint32 tagId, string memory desc) external managerOnly {\\n        require(tagId < _tagDescriptions.length, \\\"INVALID TAG ID\\\");\\n        _tagDescriptions[tagId] = desc;\\n    }\\n\\n    //////////////////////////////////////////////\\n    // manipulation functions Related To Contribution Records\\n    /////////////////////////////////////////////\\n\\n    /// @notice create contribution record\\n    function createRecord(address contributor, uint32 tagId, uint32 point) external managerOnly {\\n        require(tagId < _tagDescriptions.length, \\\"INVALID TAG ID\\\");\\n        require(point > 0, \\\"NOT ZERO\\\");\\n\\n        if (balanceOf(contributor) == 0) {\\n            // first, register\\n            registerContributor(contributor);\\n        }\\n\\n        _contributionRecords[contributor].push(ContributionRecord(tagId, uint32(block.timestamp), point));\\n        _pointOf[contributor] += castToInt256(point);\\n    }\\n\\n    /// @notice modify contribution record\\n    function updateRecord(address contributor, uint256 orderId, uint32 point) external managerOnly {\\n        require(point > 0, \\\"NOT ZERO\\\");\\n        require(orderId < _contributionRecords[contributor].length, \\\"INVALID ORDER ID\\\");\\n\\n        uint32 prevPoint = _contributionRecords[contributor][orderId].point;\\n        _contributionRecords[contributor][orderId].point = point;\\n\\n        if (prevPoint < point) {\\n            _pointOf[contributor] += castToInt256(point - prevPoint);\\n        } else {\\n            _pointOf[contributor] -= castToInt256(prevPoint - point);\\n        }\\n    }\\n\\n    /// @notice delete contribution record\\n    function deleteRecord(address contributor, uint256 orderId) external managerOnly returns (ContributionRecord memory record) {\\n        ContributionRecord[] storage records = _contributionRecords[contributor];\\n        record = records[orderId];\\n        for (uint i = orderId; i < records.length -1; i++) {\\n            records[i] = records[i+1];\\n        }\\n        records.pop();\\n\\n        _pointOf[contributor] -= castToInt256(record.point);\\n    }\\n\\n    function registerContributor(\\n        address contributor\\n    ) private {\\n        _mint(contributor, _contributorCounter);\\n        _contributorIdOf[contributor] = _contributorCounter;\\n        _contributorCounter++;\\n    }\\n\\n    /// @dev block to transfer or multiple mint\\n    function _beforeTokenTransfer(address from, address, uint256) internal pure override {\\n        require(from == address(0), \\\"NOT-TRANSFERABLE\\\");\\n    }\\n\\n    function castToInt256(uint32 x) private pure returns (int256 y) {\\n        y = int256(uint256(x));\\n    }\\n}\\n\",\"keccak256\":\"0x392e52c185300317ebe69970903210830678b287e2e9ddb50d8f3ac0b9ebc47a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IContributionPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IContributionStruct.sol\\\";\\n\\n\\ninterface IContributionPoint is IContributionStruct {\\n    function totalSupply() external view returns (uint256);\\n\\n    function contributorIdOf(address contributor) external view returns (uint256);\\n\\n    function totalTags() external view returns (uint256);\\n\\n    function tagDescription(uint32 tagId) external view returns (string memory);\\n\\n    function contributionRecordCounts(address contributor) external view returns (uint256);\\n\\n    function contributionRecordByIndex(address contributor, uint256 orderId) external view returns (ContributionRecord memory);\\n\\n    function contributionRecords(address contributor, uint256 start, uint256 nums) external view returns (ContributionRecord[] memory records);\\n\\n    function contributionPointOf(address contributor) external view returns (int256);\\n\\n    function usePoint(uint32 amount, address to, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xefdf4875cbb2765450c57bf9a16b1b326dfb2a1360c494dffb5c0a7cbb28311b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IContributionPointModerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IContributionStruct.sol\\\";\\n\\ninterface IContributionPointModerator is IContributionStruct {\\n    function createTag(string memory desc) external returns (uint32 tagId);\\n\\n    function updateTagDescription(uint32 tagId, string memory desc) external;\\n\\n    function createRecord(address contributor, uint32 tagId, uint32 point) external;\\n\\n    function updateRecord(address contributor, uint256 orderId, uint32 point) external;\\n\\n    function deleteRecord(address contributor, uint256 orderId) external returns (ContributionRecord memory record);\\n}\\n\",\"keccak256\":\"0xab8a80eda5a9eb8b9f6149d852e298dd894f2199e73f51f90a64a1cf1564e206\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IContributionStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface IContributionStruct {\\n    struct ContributionRecord {\\n        uint32 tagId;\\n        uint32 time;\\n        uint32 point;\\n    }\\n}\\n\",\"keccak256\":\"0xe2f8da1fb1168bbd47233d5e5fbe37ec08335d0bf27308509bb3e48f644d1a17\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/UsePointCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0;\\n\\ninterface UsePointCallee {\\n    function usePointCallback(uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x817e78bdb1c1d64c9ee464ecf5f8403c994796c40d3b7094fe12fd9f5b016e04\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061488d806100206000396000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c806367cf96aa11610145578063b88d4fde116100bd578063d547741f1161008c578063e985e9c511610071578063e985e9c5146105b4578063ec87621c146105fd578063f02ab9871461062457600080fd5b8063d547741f1461058e578063dc9adfa8146105a157600080fd5b8063b88d4fde1461051f578063c185bd1014610532578063c87b56dd14610545578063c9ddc2641461055857600080fd5b806395d89b4111610114578063a22cb465116100f9578063a22cb465146104d9578063ac9650d8146104ec578063b85891ea1461050c57600080fd5b806395d89b41146104c9578063a217fddf146104d157600080fd5b806367cf96aa1461044a57806370a082311461045d5780637a6d40031461047057806391d148541461048357600080fd5b8063248a9ca3116101d85780633f6782d2116101a75780634585cdc11161018c5780634585cdc1146104115780634cd88b76146104245780636352211e1461043757600080fd5b80633f6782d2146103c857806342842e0e146103fe57600080fd5b8063248a9ca31461035f5780632f2ff15d1461038257806336568abe146103955780633be09cb7146103a857600080fd5b8063095ea7b31161022f5780631f36d212116102145780631f36d21214610304578063210661b71461032c57806323b872dd1461034c57600080fd5b8063095ea7b3146102e757806318160ddd146102fc57600080fd5b8062e9236f1461026057806301ffc9a71461027757806306fdde031461029a578063081812fc146102af575b600080fd5b60fd545b6040519081526020015b60405180910390f35b61028a610285366004613884565b610637565b604051901515815260200161026e565b6102a2610657565b60405161026e9190613917565b6102c26102bd36600461392a565b6106e9565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161026e565b6102fa6102f5366004613967565b61071d565b005b60ff54610264565b610317610312366004613a74565b6108af565b60405163ffffffff909116815260200161026e565b61033f61033a366004613967565b6109b1565b60405161026e9190613aa9565b6102fa61035a366004613ad6565b610cb2565b61026461036d36600461392a565b60009081526097602052604090206001015490565b6102fa610390366004613b12565b610d53565b6102fa6103a3366004613b12565b610d78565b6103bb6103b6366004613b3e565b610e2b565b60405161026e9190613b71565b6102646103d6366004613bde565b73ffffffffffffffffffffffffffffffffffffffff16600090815260fb602052604090205490565b6102fa61040c366004613ad6565b611069565b6102a261041f366004613c0d565b611084565b6102fa610432366004613c28565b611139565b6102c261044536600461392a565b6112f2565b610264610458366004613bde565b61137e565b61026461046b366004613bde565b61141a565b6102fa61047e366004613c8c565b6114e8565b61028a610491366004613b12565b600091825260976020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6102a2611805565b610264600081565b6102fa6104e7366004613cc8565b611814565b6104ff6104fa366004613d04565b61181f565b60405161026e9190613d79565b6102fa61051a366004613df9565b611914565b6102fa61052d366004613e87565b611a58565b6102fa610540366004613f03565b611afa565b6102a261055336600461392a565b611da9565b610264610566366004613bde565b73ffffffffffffffffffffffffffffffffffffffff16600090815260fc602052604090205490565b6102fa61059c366004613b12565b611eb7565b6102fa6105af366004613f3d565b611edc565b61028a6105c2366004613f81565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6102647faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b61033f610632366004613967565b61201c565b6000610642826120bc565b8061065157506106518261219f565b92915050565b60606065805461066690613fab565b80601f016020809104026020016040519081016040528092919081815260200182805461069290613fab565b80156106df5780601f106106b4576101008083540402835291602001916106df565b820191906000526020600020905b8154815290600101906020018083116106c257829003601f168201915b5050505050905090565b60006106f4826121f5565b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610728826112f2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff82161480610814575061081481336105c2565b6108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107e2565b6108aa8383612283565b505050565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604081205460ff16610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60fd5463ffffffff1161095957600080fd5b60fd8054600181018255600091909152825161099c917f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca280019060208501906137bd565b5060fd546106519060019061402e565b919050565b60408051606081018252600080825260208083018290528284018290523382527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f9052919091205460ff16610a62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb602052604090208054819084908110610a9b57610a9b614045565b600091825260209182902060408051606081018252919092015463ffffffff80821683526401000000008204811694830194909452680100000000000000009004909216908201529150825b8154610af59060019061402e565b811015610bfc5781610b08826001614074565b81548110610b1857610b18614045565b90600052602060002001828281548110610b3457610b34614045565b6000918252602090912082549101805463ffffffff9283167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082168117835584547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909216176401000000009182900484169091021780825592547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff909316680100000000000000009384900490921690920217905580610bf48161408c565b915050610ae7565b5080805480610c0d57610c0d6140c5565b6000828152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908201810180547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169055019055604082015163ffffffff1673ffffffffffffffffffffffffffffffffffffffff8516600090815260fc602052604081208054909190610ca59084906140f4565b9091555091949350505050565b610cbc3382612323565b610d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107e2565b6108aa8383836123e3565b600082815260976020526040902060010154610d6e81612655565b6108aa838361265f565b73ffffffffffffffffffffffffffffffffffffffff81163314610e1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107e2565b610e278282612753565b5050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb60209081526040808320805482518185028101850190935280835260609493849084015b82821015610ec6576000848152602090819020604080516060810182529185015463ffffffff80821684526401000000008204811684860152680100000000000000009091041690820152825260019092019101610e6d565b5050505090506000610efc60018587610edf9190614074565b610ee9919061402e565b60018451610ef7919061402e565b61280e565b905080851115610f68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f205245434f5244530000000000000000000000000000000000000000000060448201526064016107e2565b610f72858261402e565b610f7d906001614074565b67ffffffffffffffff811115610f9557610f95613991565b604051908082528060200260200182016040528015610ffe57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610fb35790505b509250845b81811161105f5782818151811061101c5761101c614045565b6020026020010151848783611031919061402e565b8151811061104157611041614045565b602002602001018190525080806110579061408c565b915050611003565b5050509392505050565b6108aa83838360405180602001604052806000815250611a58565b606060fd8263ffffffff168154811061109f5761109f614045565b9060005260206000200180546110b490613fab565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090613fab565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b50505050509050919050565b600054610100900460ff16158080156111595750600054600160ff909116105b806111735750303b158015611173575060005460ff166001145b6111ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107e2565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561125d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6112678383612826565b61126f6128c7565b6112776128c7565b611282600033612960565b61128b3361296a565b80156108aa57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107e2565b60008061138a8361141a565b116113f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f204d454d424552534849500000000000000000000000000000000000000060448201526064016107e2565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260fe602052604090205490565b600073ffffffffffffffffffffffffffffffffffffffff82166114bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107e2565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604090205460ff16611580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60008163ffffffff16116115f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f54205a45524f00000000000000000000000000000000000000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb6020526040902054821061167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f494e56414c4944204f524445522049440000000000000000000000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb602052604081208054849081106116b5576116b5614045565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff8716835260fb909152604090912080546801000000000000000090920463ffffffff16925083918590811061171057611710614045565b600091825260209091200180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff9384160217905582811690821610156117b75761177761176e8284614168565b63ffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fc6020526040812080549091906117ac90849061418d565b909155506117ff9050565b6117c461176e8383614168565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fc6020526040812080549091906117f99084906140f4565b90915550505b50505050565b60606066805461066690613fab565b610e273383836129b6565b60608167ffffffffffffffff81111561183a5761183a613991565b60405190808252806020026020018201604052801561186d57816020015b60608152602001906001900390816118585790505b50905060005b8281101561190d576118dd3085858481811061189157611891614045565b90506020028101906118a39190614201565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ae492505050565b8282815181106118ef576118ef614045565b602002602001018190525080806119059061408c565b915050611873565b5092915050565b33600090815260fc602052604081205490811380156119395750808563ffffffff1611155b61199f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e53554646494349454e54000000000000000000000000000000000000000060448201526064016107e2565b33600090815260fc60205260408120805463ffffffff881692906119c49084906140f4565b90915550506040517fc7bc33f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063c7bc33f090611a1f9088908790879060040161426d565b600060405180830381600087803b158015611a3957600080fd5b505af1158015611a4d573d6000803e3d6000fd5b505050505050505050565b611a623383612323565b611aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107e2565b6117ff84848484612c23565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604090205460ff16611b92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60fd5463ffffffff831610611c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49442054414720494400000000000000000000000000000000000060448201526064016107e2565b60008163ffffffff1611611c73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f54205a45524f00000000000000000000000000000000000000000000000060448201526064016107e2565b611c7c8361141a565b611c8957611c898361296a565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb60209081526040808320815160608101835263ffffffff808816825242811682860190815287821694830194855283546001810185559387529490952090519101805493519251851668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff938616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090951692909516919091179290921716919091179055611d6a8163ffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260fc602052604081208054909190611d9f90849061418d565b9091555050505050565b60606000611db6836112f2565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fc6020526040812054919250808213611e1b57611df7611df2836142c7565b612cc6565b604051602001611e07919061431c565b604051602081830303815290604052611e24565b611e2482612cc6565b90506000611e8a611e3487612cc6565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260fb6020526040902054611e6390612cc6565b84604051602001611e7693929190614361565b604051602081830303815290604052612df8565b905080604051602001611e9d91906145e9565b604051602081830303815290604052945050505050919050565b600082815260976020526040902060010154611ed281612655565b6108aa8383612753565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604090205460ff16611f74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60fd5463ffffffff831610611fe5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49442054414720494400000000000000000000000000000000000060448201526064016107e2565b8060fd8363ffffffff1681548110611fff57611fff614045565b9060005260206000200190805190602001906108aa9291906137bd565b604080516060810182526000808252602080830182905282840182905273ffffffffffffffffffffffffffffffffffffffff8616825260fb90529190912080548390811061206c5761206c614045565b600091825260209182902060408051606081018252919092015463ffffffff8082168352640100000000820481169483019490945268010000000000000000900490921690820152905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061214f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610651565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106515750610651826120bc565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16612280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107e2565b50565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906122dd826112f2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061232f836112f2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061239d575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff165b806123db57508373ffffffffffffffffffffffffffffffffffffffff166123c3846106e9565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16612403826112f2565b73ffffffffffffffffffffffffffffffffffffffff16146124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016107e2565b73ffffffffffffffffffffffffffffffffffffffff8216612548576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107e2565b612553838383612f4c565b61255e600082612283565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260686020526040812080546001929061259490849061402e565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906125cf908490614074565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6122808133612fca565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e2757600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556126f53390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610e2757600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081831061281d578161281f565b825b9392505050565b600054610100900460ff166128bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107e2565b610e27828261309c565b600054610100900460ff1661295e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107e2565b565b610e27828261265f565b6129768160ff5461315a565b60ff805473ffffffffffffffffffffffffffffffffffffffff8316600090815260fe602052604081208290559091906129ae8361408c565b919050555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606073ffffffffffffffffffffffffffffffffffffffff83163b612b8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107e2565b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612bb2919061462e565b600060405180830381855af49150503d8060008114612bed576040519150601f19603f3d011682016040523d82523d6000602084013e612bf2565b606091505b5091509150612c1a828260405180606001604052806027815260200161483160279139613328565b95945050505050565b612c2e8484846123e3565b612c3a8484848461337b565b6117ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107e2565b606081612d0657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612d305780612d1a8161408c565b9150612d299050600a83614679565b9150612d0a565b60008167ffffffffffffffff811115612d4b57612d4b613991565b6040519080825280601f01601f191660200182016040528015612d75576020820181803683370190505b5090505b84156123db57612d8a60018361402e565b9150612d97600a8661468d565b612da2906030614074565b60f81b818381518110612db757612db7614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612df1600a86614679565b9450612d79565b6060815160001415612e1857505060408051602081019091526000815290565b60006040518060600160405280604081526020016147f16040913990506000600384516002612e479190614074565b612e519190614679565b612e5c9060046146a1565b67ffffffffffffffff811115612e7457612e74613991565b6040519080825280601f01601f191660200182016040528015612e9e576020820181803683370190505b509050600182016020820185865187015b80821015612f0a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250612eaf565b5050600386510660018114612f265760028114612f3957612f41565b603d6001830353603d6002830353612f41565b603d60018303535b509195945050505050565b73ffffffffffffffffffffffffffffffffffffffff8316156108aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e4f542d5452414e5346455241424c450000000000000000000000000000000060448201526064016107e2565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e27576130228173ffffffffffffffffffffffffffffffffffffffff16601461357a565b61302d83602061357a565b60405160200161303e9291906146de565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526107e291600401613917565b600054610100900460ff16613133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107e2565b81516131469060659060208501906137bd565b5080516108aa9060669060208401906137bd565b73ffffffffffffffffffffffffffffffffffffffff82166131d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107e2565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107e2565b61326f60008383612f4c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906132a5908490614074565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060831561333757508161281f565b8251156133475782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e29190613917565b600073ffffffffffffffffffffffffffffffffffffffff84163b1561356f576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906133f290339089908890889060040161475f565b602060405180830381600087803b15801561340c57600080fd5b505af192505050801561345a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526134579181019061479e565b60015b613524573d808015613488576040519150601f19603f3d011682016040523d82523d6000602084013e61348d565b606091505b50805161351c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107e2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506123db565b506001949350505050565b606060006135898360026146a1565b613594906002614074565b67ffffffffffffffff8111156135ac576135ac613991565b6040519080825280601f01601f1916602001820160405280156135d6576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061360d5761360d614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061367057613670614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006136ac8460026146a1565b6136b7906001614074565b90505b6001811115613754577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106136f8576136f8614045565b1a60f81b82828151811061370e5761370e614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361374d816147bb565b90506136ba565b50831561281f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e2565b8280546137c990613fab565b90600052602060002090601f0160209004810192826137eb5760008555613831565b82601f1061380457805160ff1916838001178555613831565b82800160010185558215613831579182015b82811115613831578251825591602001919060010190613816565b5061383d929150613841565b5090565b5b8082111561383d5760008155600101613842565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461228057600080fd5b60006020828403121561389657600080fd5b813561281f81613856565b60005b838110156138bc5781810151838201526020016138a4565b838111156117ff5750506000910152565b600081518084526138e58160208601602086016138a1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061281f60208301846138cd565b60006020828403121561393c57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109ac57600080fd5b6000806040838503121561397a57600080fd5b61398383613943565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156139db576139db613991565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715613a2157613a21613991565b81604052809350858152868686011115613a3a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613a6557600080fd5b61281f838335602085016139c0565b600060208284031215613a8657600080fd5b813567ffffffffffffffff811115613a9d57600080fd5b6123db84828501613a54565b606081016106518284805163ffffffff908116835260208083015182169084015260409182015116910152565b600080600060608486031215613aeb57600080fd5b613af484613943565b9250613b0260208501613943565b9150604084013590509250925092565b60008060408385031215613b2557600080fd5b82359150613b3560208401613943565b90509250929050565b600080600060608486031215613b5357600080fd5b613b5c84613943565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015613bd257613bbf838551805163ffffffff908116835260208083015182169084015260409182015116910152565b9284019260609290920191600101613b8d565b50909695505050505050565b600060208284031215613bf057600080fd5b61281f82613943565b803563ffffffff811681146109ac57600080fd5b600060208284031215613c1f57600080fd5b61281f82613bf9565b60008060408385031215613c3b57600080fd5b823567ffffffffffffffff80821115613c5357600080fd5b613c5f86838701613a54565b93506020850135915080821115613c7557600080fd5b50613c8285828601613a54565b9150509250929050565b600080600060608486031215613ca157600080fd5b613caa84613943565b925060208401359150613cbf60408501613bf9565b90509250925092565b60008060408385031215613cdb57600080fd5b613ce483613943565b915060208301358015158114613cf957600080fd5b809150509250929050565b60008060208385031215613d1757600080fd5b823567ffffffffffffffff80821115613d2f57600080fd5b818501915085601f830112613d4357600080fd5b813581811115613d5257600080fd5b8660208260051b8501011115613d6757600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613dec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613dda8583516138cd565b94509285019290850190600101613da0565b5092979650505050505050565b60008060008060608587031215613e0f57600080fd5b613e1885613bf9565b9350613e2660208601613943565b9250604085013567ffffffffffffffff80821115613e4357600080fd5b818701915087601f830112613e5757600080fd5b813581811115613e6657600080fd5b886020828501011115613e7857600080fd5b95989497505060200194505050565b60008060008060808587031215613e9d57600080fd5b613ea685613943565b9350613eb460208601613943565b925060408501359150606085013567ffffffffffffffff811115613ed757600080fd5b8501601f81018713613ee857600080fd5b613ef7878235602084016139c0565b91505092959194509250565b600080600060608486031215613f1857600080fd5b613f2184613943565b9250613f2f60208501613bf9565b9150613cbf60408501613bf9565b60008060408385031215613f5057600080fd5b613f5983613bf9565b9150602083013567ffffffffffffffff811115613f7557600080fd5b613c8285828601613a54565b60008060408385031215613f9457600080fd5b613f9d83613943565b9150613b3560208401613943565b600181811c90821680613fbf57607f821691505b60208210811415613ff9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561404057614040613fff565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000821982111561408757614087613fff565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140be576140be613fff565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561412e5761412e613fff565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561416257614162613fff565b50500390565b600063ffffffff8381169083168181101561418557614185613fff565b039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156141c7576141c7613fff565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156141fb576141fb613fff565b50500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261423657600080fd5b83018035915067ffffffffffffffff82111561425157600080fd5b60200191503681900382131561426657600080fd5b9250929050565b63ffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60007f80000000000000000000000000000000000000000000000000000000000000008214156142f9576142f9613fff565b5060000390565b600081516143128185602086016138a1565b9290920192915050565b7f2d000000000000000000000000000000000000000000000000000000000000008152600082516143548160018501602087016138a1565b9190910160010192915050565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022434f4e5452494255544f522023000000000000000000006001820152600084516143bf8160178501602089016138a1565b7f222c2000000000000000000000000000000000000000000000000000000000006017918401918201527f226465736372697074696f6e223a202250414e47454120436f6e747269627574601a8201527f696f6e20506f696e742c2074686973204e465420726570726573656e74732063603a8201527f6f6e747269627574696f6e20706f696e7420666f722050414e47454120636f6e605a8201527f7472696275746f7273222c000000000000000000000000000000000000000000607a8201527f2261747472696275746573223a205b000000000000000000000000000000000060858201527f7b2274726169745f74797065223a226e756d4f66436f6e747269627574696f6e60948201527f73222c2276616c7565223a00000000000000000000000000000000000000000060b48201526145df6145b661458d61458761453861450f60bf87018b614300565b7f7d2c000000000000000000000000000000000000000000000000000000000000815260020190565b7f7b2274726169745f74797065223a22746f74616c506f696e7473222c2276616c81527f7565223a00000000000000000000000000000000000000000000000000000000602082015260240190565b87614300565b7f7d5d000000000000000000000000000000000000000000000000000000000000815260020190565b7f7d00000000000000000000000000000000000000000000000000000000000000815260010190565b9695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161462181601d8501602087016138a1565b91909101601d0192915050565b600082516146408184602087016138a1565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826146885761468861464a565b500490565b60008261469c5761469c61464a565b500690565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146d9576146d9613fff565b500290565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516147168160178501602088016138a1565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516147538160288401602088016138a1565b01602801949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526145df60808301846138cd565b6000602082840312156147b057600080fd5b815161281f81613856565b6000816147ca576147ca613fff565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b343d2859c133ffd3d85e6ebade50793ba44feb2f667247dff9118e9c3677d1164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025b5760003560e01c806367cf96aa11610145578063b88d4fde116100bd578063d547741f1161008c578063e985e9c511610071578063e985e9c5146105b4578063ec87621c146105fd578063f02ab9871461062457600080fd5b8063d547741f1461058e578063dc9adfa8146105a157600080fd5b8063b88d4fde1461051f578063c185bd1014610532578063c87b56dd14610545578063c9ddc2641461055857600080fd5b806395d89b4111610114578063a22cb465116100f9578063a22cb465146104d9578063ac9650d8146104ec578063b85891ea1461050c57600080fd5b806395d89b41146104c9578063a217fddf146104d157600080fd5b806367cf96aa1461044a57806370a082311461045d5780637a6d40031461047057806391d148541461048357600080fd5b8063248a9ca3116101d85780633f6782d2116101a75780634585cdc11161018c5780634585cdc1146104115780634cd88b76146104245780636352211e1461043757600080fd5b80633f6782d2146103c857806342842e0e146103fe57600080fd5b8063248a9ca31461035f5780632f2ff15d1461038257806336568abe146103955780633be09cb7146103a857600080fd5b8063095ea7b31161022f5780631f36d212116102145780631f36d21214610304578063210661b71461032c57806323b872dd1461034c57600080fd5b8063095ea7b3146102e757806318160ddd146102fc57600080fd5b8062e9236f1461026057806301ffc9a71461027757806306fdde031461029a578063081812fc146102af575b600080fd5b60fd545b6040519081526020015b60405180910390f35b61028a610285366004613884565b610637565b604051901515815260200161026e565b6102a2610657565b60405161026e9190613917565b6102c26102bd36600461392a565b6106e9565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161026e565b6102fa6102f5366004613967565b61071d565b005b60ff54610264565b610317610312366004613a74565b6108af565b60405163ffffffff909116815260200161026e565b61033f61033a366004613967565b6109b1565b60405161026e9190613aa9565b6102fa61035a366004613ad6565b610cb2565b61026461036d36600461392a565b60009081526097602052604090206001015490565b6102fa610390366004613b12565b610d53565b6102fa6103a3366004613b12565b610d78565b6103bb6103b6366004613b3e565b610e2b565b60405161026e9190613b71565b6102646103d6366004613bde565b73ffffffffffffffffffffffffffffffffffffffff16600090815260fb602052604090205490565b6102fa61040c366004613ad6565b611069565b6102a261041f366004613c0d565b611084565b6102fa610432366004613c28565b611139565b6102c261044536600461392a565b6112f2565b610264610458366004613bde565b61137e565b61026461046b366004613bde565b61141a565b6102fa61047e366004613c8c565b6114e8565b61028a610491366004613b12565b600091825260976020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6102a2611805565b610264600081565b6102fa6104e7366004613cc8565b611814565b6104ff6104fa366004613d04565b61181f565b60405161026e9190613d79565b6102fa61051a366004613df9565b611914565b6102fa61052d366004613e87565b611a58565b6102fa610540366004613f03565b611afa565b6102a261055336600461392a565b611da9565b610264610566366004613bde565b73ffffffffffffffffffffffffffffffffffffffff16600090815260fc602052604090205490565b6102fa61059c366004613b12565b611eb7565b6102fa6105af366004613f3d565b611edc565b61028a6105c2366004613f81565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6102647faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b61033f610632366004613967565b61201c565b6000610642826120bc565b8061065157506106518261219f565b92915050565b60606065805461066690613fab565b80601f016020809104026020016040519081016040528092919081815260200182805461069290613fab565b80156106df5780601f106106b4576101008083540402835291602001916106df565b820191906000526020600020905b8154815290600101906020018083116106c257829003601f168201915b5050505050905090565b60006106f4826121f5565b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610728826112f2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff82161480610814575061081481336105c2565b6108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107e2565b6108aa8383612283565b505050565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604081205460ff16610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60fd5463ffffffff1161095957600080fd5b60fd8054600181018255600091909152825161099c917f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca280019060208501906137bd565b5060fd546106519060019061402e565b919050565b60408051606081018252600080825260208083018290528284018290523382527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f9052919091205460ff16610a62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb602052604090208054819084908110610a9b57610a9b614045565b600091825260209182902060408051606081018252919092015463ffffffff80821683526401000000008204811694830194909452680100000000000000009004909216908201529150825b8154610af59060019061402e565b811015610bfc5781610b08826001614074565b81548110610b1857610b18614045565b90600052602060002001828281548110610b3457610b34614045565b6000918252602090912082549101805463ffffffff9283167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082168117835584547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909216176401000000009182900484169091021780825592547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff909316680100000000000000009384900490921690920217905580610bf48161408c565b915050610ae7565b5080805480610c0d57610c0d6140c5565b6000828152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908201810180547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169055019055604082015163ffffffff1673ffffffffffffffffffffffffffffffffffffffff8516600090815260fc602052604081208054909190610ca59084906140f4565b9091555091949350505050565b610cbc3382612323565b610d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107e2565b6108aa8383836123e3565b600082815260976020526040902060010154610d6e81612655565b6108aa838361265f565b73ffffffffffffffffffffffffffffffffffffffff81163314610e1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016107e2565b610e278282612753565b5050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb60209081526040808320805482518185028101850190935280835260609493849084015b82821015610ec6576000848152602090819020604080516060810182529185015463ffffffff80821684526401000000008204811684860152680100000000000000009091041690820152825260019092019101610e6d565b5050505090506000610efc60018587610edf9190614074565b610ee9919061402e565b60018451610ef7919061402e565b61280e565b905080851115610f68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f205245434f5244530000000000000000000000000000000000000000000060448201526064016107e2565b610f72858261402e565b610f7d906001614074565b67ffffffffffffffff811115610f9557610f95613991565b604051908082528060200260200182016040528015610ffe57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610fb35790505b509250845b81811161105f5782818151811061101c5761101c614045565b6020026020010151848783611031919061402e565b8151811061104157611041614045565b602002602001018190525080806110579061408c565b915050611003565b5050509392505050565b6108aa83838360405180602001604052806000815250611a58565b606060fd8263ffffffff168154811061109f5761109f614045565b9060005260206000200180546110b490613fab565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090613fab565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b50505050509050919050565b600054610100900460ff16158080156111595750600054600160ff909116105b806111735750303b158015611173575060005460ff166001145b6111ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107e2565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561125d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6112678383612826565b61126f6128c7565b6112776128c7565b611282600033612960565b61128b3361296a565b80156108aa57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107e2565b60008061138a8361141a565b116113f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e4f204d454d424552534849500000000000000000000000000000000000000060448201526064016107e2565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260fe602052604090205490565b600073ffffffffffffffffffffffffffffffffffffffff82166114bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107e2565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604090205460ff16611580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60008163ffffffff16116115f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f54205a45524f00000000000000000000000000000000000000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb6020526040902054821061167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f494e56414c4944204f524445522049440000000000000000000000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb602052604081208054849081106116b5576116b5614045565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff8716835260fb909152604090912080546801000000000000000090920463ffffffff16925083918590811061171057611710614045565b600091825260209091200180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff9384160217905582811690821610156117b75761177761176e8284614168565b63ffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fc6020526040812080549091906117ac90849061418d565b909155506117ff9050565b6117c461176e8383614168565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fc6020526040812080549091906117f99084906140f4565b90915550505b50505050565b60606066805461066690613fab565b610e273383836129b6565b60608167ffffffffffffffff81111561183a5761183a613991565b60405190808252806020026020018201604052801561186d57816020015b60608152602001906001900390816118585790505b50905060005b8281101561190d576118dd3085858481811061189157611891614045565b90506020028101906118a39190614201565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ae492505050565b8282815181106118ef576118ef614045565b602002602001018190525080806119059061408c565b915050611873565b5092915050565b33600090815260fc602052604081205490811380156119395750808563ffffffff1611155b61199f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e53554646494349454e54000000000000000000000000000000000000000060448201526064016107e2565b33600090815260fc60205260408120805463ffffffff881692906119c49084906140f4565b90915550506040517fc7bc33f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063c7bc33f090611a1f9088908790879060040161426d565b600060405180830381600087803b158015611a3957600080fd5b505af1158015611a4d573d6000803e3d6000fd5b505050505050505050565b611a623383612323565b611aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f76656400000000000000000000000000000000000060648201526084016107e2565b6117ff84848484612c23565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604090205460ff16611b92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60fd5463ffffffff831610611c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49442054414720494400000000000000000000000000000000000060448201526064016107e2565b60008163ffffffff1611611c73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e4f54205a45524f00000000000000000000000000000000000000000000000060448201526064016107e2565b611c7c8361141a565b611c8957611c898361296a565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb60209081526040808320815160608101835263ffffffff808816825242811682860190815287821694830194855283546001810185559387529490952090519101805493519251851668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff938616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090951692909516919091179290921716919091179055611d6a8163ffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260fc602052604081208054909190611d9f90849061418d565b9091555050505050565b60606000611db6836112f2565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fc6020526040812054919250808213611e1b57611df7611df2836142c7565b612cc6565b604051602001611e07919061431c565b604051602081830303815290604052611e24565b611e2482612cc6565b90506000611e8a611e3487612cc6565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260fb6020526040902054611e6390612cc6565b84604051602001611e7693929190614361565b604051602081830303815290604052612df8565b905080604051602001611e9d91906145e9565b604051602081830303815290604052945050505050919050565b600082815260976020526040902060010154611ed281612655565b6108aa8383612753565b3360009081527fe0601880cdabed0469f97fd15da07fe74fbbb126935f404539f62180845d005f602052604090205460ff16611f74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4e4c59204d414e41474552000000000000000000000000000000000000000060448201526064016107e2565b60fd5463ffffffff831610611fe5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49442054414720494400000000000000000000000000000000000060448201526064016107e2565b8060fd8363ffffffff1681548110611fff57611fff614045565b9060005260206000200190805190602001906108aa9291906137bd565b604080516060810182526000808252602080830182905282840182905273ffffffffffffffffffffffffffffffffffffffff8616825260fb90529190912080548390811061206c5761206c614045565b600091825260209182902060408051606081018252919092015463ffffffff8082168352640100000000820481169483019490945268010000000000000000900490921690820152905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061214f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061065157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610651565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106515750610651826120bc565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16612280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107e2565b50565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906122dd826112f2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061232f836112f2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061239d575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff165b806123db57508373ffffffffffffffffffffffffffffffffffffffff166123c3846106e9565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16612403826112f2565b73ffffffffffffffffffffffffffffffffffffffff16146124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016107e2565b73ffffffffffffffffffffffffffffffffffffffff8216612548576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107e2565b612553838383612f4c565b61255e600082612283565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260686020526040812080546001929061259490849061402e565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906125cf908490614074565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6122808133612fca565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e2757600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556126f53390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610e2757600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081831061281d578161281f565b825b9392505050565b600054610100900460ff166128bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107e2565b610e27828261309c565b600054610100900460ff1661295e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107e2565b565b610e27828261265f565b6129768160ff5461315a565b60ff805473ffffffffffffffffffffffffffffffffffffffff8316600090815260fe602052604081208290559091906129ae8361408c565b919050555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107e2565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606073ffffffffffffffffffffffffffffffffffffffff83163b612b8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107e2565b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612bb2919061462e565b600060405180830381855af49150503d8060008114612bed576040519150601f19603f3d011682016040523d82523d6000602084013e612bf2565b606091505b5091509150612c1a828260405180606001604052806027815260200161483160279139613328565b95945050505050565b612c2e8484846123e3565b612c3a8484848461337b565b6117ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107e2565b606081612d0657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612d305780612d1a8161408c565b9150612d299050600a83614679565b9150612d0a565b60008167ffffffffffffffff811115612d4b57612d4b613991565b6040519080825280601f01601f191660200182016040528015612d75576020820181803683370190505b5090505b84156123db57612d8a60018361402e565b9150612d97600a8661468d565b612da2906030614074565b60f81b818381518110612db757612db7614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612df1600a86614679565b9450612d79565b6060815160001415612e1857505060408051602081019091526000815290565b60006040518060600160405280604081526020016147f16040913990506000600384516002612e479190614074565b612e519190614679565b612e5c9060046146a1565b67ffffffffffffffff811115612e7457612e74613991565b6040519080825280601f01601f191660200182016040528015612e9e576020820181803683370190505b509050600182016020820185865187015b80821015612f0a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250612eaf565b5050600386510660018114612f265760028114612f3957612f41565b603d6001830353603d6002830353612f41565b603d60018303535b509195945050505050565b73ffffffffffffffffffffffffffffffffffffffff8316156108aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e4f542d5452414e5346455241424c450000000000000000000000000000000060448201526064016107e2565b600082815260976020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610e27576130228173ffffffffffffffffffffffffffffffffffffffff16601461357a565b61302d83602061357a565b60405160200161303e9291906146de565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526107e291600401613917565b600054610100900460ff16613133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107e2565b81516131469060659060208501906137bd565b5080516108aa9060669060208401906137bd565b73ffffffffffffffffffffffffffffffffffffffff82166131d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107e2565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107e2565b61326f60008383612f4c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906132a5908490614074565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060831561333757508161281f565b8251156133475782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e29190613917565b600073ffffffffffffffffffffffffffffffffffffffff84163b1561356f576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906133f290339089908890889060040161475f565b602060405180830381600087803b15801561340c57600080fd5b505af192505050801561345a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526134579181019061479e565b60015b613524573d808015613488576040519150601f19603f3d011682016040523d82523d6000602084013e61348d565b606091505b50805161351c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107e2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506123db565b506001949350505050565b606060006135898360026146a1565b613594906002614074565b67ffffffffffffffff8111156135ac576135ac613991565b6040519080825280601f01601f1916602001820160405280156135d6576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061360d5761360d614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061367057613670614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006136ac8460026146a1565b6136b7906001614074565b90505b6001811115613754577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106136f8576136f8614045565b1a60f81b82828151811061370e5761370e614045565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361374d816147bb565b90506136ba565b50831561281f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e2565b8280546137c990613fab565b90600052602060002090601f0160209004810192826137eb5760008555613831565b82601f1061380457805160ff1916838001178555613831565b82800160010185558215613831579182015b82811115613831578251825591602001919060010190613816565b5061383d929150613841565b5090565b5b8082111561383d5760008155600101613842565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461228057600080fd5b60006020828403121561389657600080fd5b813561281f81613856565b60005b838110156138bc5781810151838201526020016138a4565b838111156117ff5750506000910152565b600081518084526138e58160208601602086016138a1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061281f60208301846138cd565b60006020828403121561393c57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109ac57600080fd5b6000806040838503121561397a57600080fd5b61398383613943565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156139db576139db613991565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715613a2157613a21613991565b81604052809350858152868686011115613a3a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613a6557600080fd5b61281f838335602085016139c0565b600060208284031215613a8657600080fd5b813567ffffffffffffffff811115613a9d57600080fd5b6123db84828501613a54565b606081016106518284805163ffffffff908116835260208083015182169084015260409182015116910152565b600080600060608486031215613aeb57600080fd5b613af484613943565b9250613b0260208501613943565b9150604084013590509250925092565b60008060408385031215613b2557600080fd5b82359150613b3560208401613943565b90509250929050565b600080600060608486031215613b5357600080fd5b613b5c84613943565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015613bd257613bbf838551805163ffffffff908116835260208083015182169084015260409182015116910152565b9284019260609290920191600101613b8d565b50909695505050505050565b600060208284031215613bf057600080fd5b61281f82613943565b803563ffffffff811681146109ac57600080fd5b600060208284031215613c1f57600080fd5b61281f82613bf9565b60008060408385031215613c3b57600080fd5b823567ffffffffffffffff80821115613c5357600080fd5b613c5f86838701613a54565b93506020850135915080821115613c7557600080fd5b50613c8285828601613a54565b9150509250929050565b600080600060608486031215613ca157600080fd5b613caa84613943565b925060208401359150613cbf60408501613bf9565b90509250925092565b60008060408385031215613cdb57600080fd5b613ce483613943565b915060208301358015158114613cf957600080fd5b809150509250929050565b60008060208385031215613d1757600080fd5b823567ffffffffffffffff80821115613d2f57600080fd5b818501915085601f830112613d4357600080fd5b813581811115613d5257600080fd5b8660208260051b8501011115613d6757600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613dec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613dda8583516138cd565b94509285019290850190600101613da0565b5092979650505050505050565b60008060008060608587031215613e0f57600080fd5b613e1885613bf9565b9350613e2660208601613943565b9250604085013567ffffffffffffffff80821115613e4357600080fd5b818701915087601f830112613e5757600080fd5b813581811115613e6657600080fd5b886020828501011115613e7857600080fd5b95989497505060200194505050565b60008060008060808587031215613e9d57600080fd5b613ea685613943565b9350613eb460208601613943565b925060408501359150606085013567ffffffffffffffff811115613ed757600080fd5b8501601f81018713613ee857600080fd5b613ef7878235602084016139c0565b91505092959194509250565b600080600060608486031215613f1857600080fd5b613f2184613943565b9250613f2f60208501613bf9565b9150613cbf60408501613bf9565b60008060408385031215613f5057600080fd5b613f5983613bf9565b9150602083013567ffffffffffffffff811115613f7557600080fd5b613c8285828601613a54565b60008060408385031215613f9457600080fd5b613f9d83613943565b9150613b3560208401613943565b600181811c90821680613fbf57607f821691505b60208210811415613ff9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561404057614040613fff565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000821982111561408757614087613fff565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140be576140be613fff565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561412e5761412e613fff565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01831381161561416257614162613fff565b50500390565b600063ffffffff8381169083168181101561418557614185613fff565b039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156141c7576141c7613fff565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156141fb576141fb613fff565b50500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261423657600080fd5b83018035915067ffffffffffffffff82111561425157600080fd5b60200191503681900382131561426657600080fd5b9250929050565b63ffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60007f80000000000000000000000000000000000000000000000000000000000000008214156142f9576142f9613fff565b5060000390565b600081516143128185602086016138a1565b9290920192915050565b7f2d000000000000000000000000000000000000000000000000000000000000008152600082516143548160018501602087016138a1565b9190910160010192915050565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022434f4e5452494255544f522023000000000000000000006001820152600084516143bf8160178501602089016138a1565b7f222c2000000000000000000000000000000000000000000000000000000000006017918401918201527f226465736372697074696f6e223a202250414e47454120436f6e747269627574601a8201527f696f6e20506f696e742c2074686973204e465420726570726573656e74732063603a8201527f6f6e747269627574696f6e20706f696e7420666f722050414e47454120636f6e605a8201527f7472696275746f7273222c000000000000000000000000000000000000000000607a8201527f2261747472696275746573223a205b000000000000000000000000000000000060858201527f7b2274726169745f74797065223a226e756d4f66436f6e747269627574696f6e60948201527f73222c2276616c7565223a00000000000000000000000000000000000000000060b48201526145df6145b661458d61458761453861450f60bf87018b614300565b7f7d2c000000000000000000000000000000000000000000000000000000000000815260020190565b7f7b2274726169745f74797065223a22746f74616c506f696e7473222c2276616c81527f7565223a00000000000000000000000000000000000000000000000000000000602082015260240190565b87614300565b7f7d5d000000000000000000000000000000000000000000000000000000000000815260020190565b7f7d00000000000000000000000000000000000000000000000000000000000000815260010190565b9695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161462181601d8501602087016138a1565b91909101601d0192915050565b600082516146408184602087016138a1565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826146885761468861464a565b500490565b60008261469c5761469c61464a565b500690565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146d9576146d9613fff565b500290565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516147168160178501602088016138a1565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516147538160288401602088016138a1565b01602801949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526145df60808301846138cd565b6000602082840312156147b057600080fd5b815161281f81613856565b6000816147ca576147ca613fff565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b343d2859c133ffd3d85e6ebade50793ba44feb2f667247dff9118e9c3677d1164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createRecord(address,uint32,uint32)": {
        "notice": "create contribution record"
      },
      "deleteRecord(address,uint256)": {
        "notice": "delete contribution record"
      },
      "tagDescription(uint32)": {
        "notice": "return contribution tag description"
      },
      "updateRecord(address,uint256,uint32)": {
        "notice": "modify contribution record"
      }
    },
    "notice": "Contribution Point membership NFT",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1900,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2279,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 592,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 594,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 598,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 602,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 606,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 612,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1454,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2009,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3105,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_contributionRecords",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_array(t_struct(ContributionRecord)3961_storage)dyn_storage)"
      },
      {
        "astId": 3109,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_pointOf",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 3112,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_tagDescriptions",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3116,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_contributorIdOf",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3118,
        "contract": "contracts/ContributionPoint.sol:ContributionPoint",
        "label": "_contributorCounter",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ContributionRecord)3961_storage)dyn_storage": {
        "base": "t_struct(ContributionRecord)3961_storage",
        "encoding": "dynamic_array",
        "label": "struct IContributionStruct.ContributionRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(ContributionRecord)3961_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IContributionStruct.ContributionRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ContributionRecord)3961_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContributionRecord)3961_storage": {
        "encoding": "inplace",
        "label": "struct IContributionStruct.ContributionRecord",
        "members": [
          {
            "astId": 3956,
            "contract": "contracts/ContributionPoint.sol:ContributionPoint",
            "label": "tagId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3958,
            "contract": "contracts/ContributionPoint.sol:ContributionPoint",
            "label": "time",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3960,
            "contract": "contracts/ContributionPoint.sol:ContributionPoint",
            "label": "point",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/ContributionPoint.sol:ContributionPoint",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/ContributionPoint.sol:ContributionPoint",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}